import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.time.DayOfWeek;
import java.time.format.DateTimeParseException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import java.util.Scanner;

public class SaludoPersona {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String nombre;
        String apellido;
        String sexo;


        // Saludo inicial
        JOptionPane.showMessageDialog(null, "Bienvenido a nuestro programa");

        //System.out.println("¡Hola! Vamos a conocerte un poco mejor.");

        // Solicitar NOMBRE

        nombre=JOptionPane.showInputDialog(null, "Porfavor introduce tu nombre" );

        //solicitar APELLIDO

        apellido=JOptionPane.showInputDialog(null, "Porfavor introduce tu apellido" );

        //solicitar SEXO

        String opciones[] = {"Opcion 1 - Masculino", "Opcion 2 - Femenino", "Prefiero no decirlo"};
        String sexoop = (String)  JOptionPane.showInputDialog("Elije un sexo");


        //Caleb :)
        // UTILIZAR JOoptionPane

        // Solicitar fecha de nacimiento
        String fechaNacimiento = "";
        boolean fechaValida = false;

        while (!fechaValida) {
            fechaNacimiento = JOptionPane.showInputDialog(null, "Porfavor introduce tu fecha de nacimiento (dd-mm-yyyy):");
            fechaValida = validarFecha(fechaNacimiento);
            if (!fechaValida) {
                System.out.println("Formato de fecha inválido. Por favor, intenta de nuevo.");
            }
        }

// Procesar fecha de nacimiento
LocalDate fechaNac = LocalDate.parse(fechaNacimiento, DateTimeFormatter.ofPattern("dd-MM-yyyy"));
LocalDate fechaActual = LocalDate.now();
long edad = ChronoUnit.YEARS.between(fechaNac, fechaActual);

// Saludo según la edad y sexo
String saludo;
        if (edad > 30) {
saludo = "Buenos días " + (sexoop.equals("Masculino") ? "Mr. " : "Ms. ") + apellido;
        } else {
saludo = "Hola amigo " + nombre;
        }

// Determinar el signo zodiacal
String signoZodiacal = obtenerSignoZodiacal(fechaNac);

// Verificar si el año es bisiesto
boolean esBisiesto = esBisiesto(fechaNac.getYear());

// Determinar el día de la semana
DayOfWeek diaSemana = fechaNac.getDayOfWeek();

// Mostrar la información ingresada
        JOptionPane.showMessageDialog(null, saludo);
        JOptionPane.showMessageDialog(null, "Nombre: " + nombre + "\nApellido: " + apellido);
        JOptionPane.showMessageDialog(null, "Sexo: " + sexoop);
        JOptionPane.showMessageDialog(null, "Fecha de Nacimiento: " + fechaNacimiento);
        JOptionPane.showMessageDialog(null, "Edad: " + edad + " años");
        JOptionPane.showMessageDialog(null, "Signo Zodiacal: " + signoZodiacal);
        JOptionPane.showMessageDialog(null, "¿Es bisiesto? " + (esBisiesto ? "Sí" : "No"));
        JOptionPane.showMessageDialog(null, "Día de la semana en que naciste: " + diaSemana);

        scanner.close();
    }

// Método para validar la fecha usando expresiones regulares
private static boolean validarFecha(String fecha) {
    // Expresión regular para validar el formato dd-mm-aaaa
    String regex = "^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])-(\\d{4})$";
    Pattern pattern = Pattern.compile(regex);
    Matcher matcher = pattern.matcher(fecha);
    return matcher.matches();
}

// Método para obtener el signo zodiacal
private static String obtenerSignoZodiacal(LocalDate fecha) {
    int dia = fecha.getDayOfMonth();
    int mes = fecha.getMonthValue();

    if ((mes == 1 && dia >= 20) || (mes == 2 && dia <= 18)) return "Acuario";
    if ((mes == 2 && dia >= 19) || (mes == 3 && dia <= 20)) return "Piscis";
    if ((mes == 3 && dia >= 21) || (mes == 4 && dia <= 19)) return "Aries";
    if ((mes == 4 && dia >= 20) || (mes == 5 && dia <= 20)) return "Tauro";
    if ((mes == 5 && dia >= 21) || (mes == 6 && dia <= 20)) return "Géminis";
    if ((mes == 6 && dia >= 21) || (mes == 7 && dia <= 22)) return "Cáncer";
    if ((mes == 7 && dia >= 23) || (mes == 8 && dia <= 22)) return "Leo";
    if ((mes == 8 && dia >= 23) || (mes == 9 && dia <= 22)) return "Virgo";
    if ((mes == 9 && dia >= 23) || (mes == 10 && dia <= 22)) return "Libra";
    if ((mes == 10 && dia >= 23) || (mes == 11 && dia <= 21)) return "Escorpio";
    if ((mes == 11 && dia >= 22) || (mes == 12 && dia <= 21)) return "Sagitario";
    if ((mes == 12 && dia >= 22) || (mes == 1 && dia <= 19)) return "Capricornio";

    return "No definido";
}

// Método para verificar si un año es bisiesto
private static boolean esBisiesto(int año) {
    return (año % 4 == 0 && año % 100 != 0) || (año % 400 == 0);
}
}
